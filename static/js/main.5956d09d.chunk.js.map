{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","App","sethideDone","setTasks","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAgCeA,EA7BF,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACZ,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAeA,OACI,uBAAMC,UAAU,OAAOC,SAdN,SAACC,GAClBA,EAAMC,iBAEN,IAAMC,EAAwBN,EAAeO,OAExCD,IAILR,EAAWQ,GACXL,EAAkB,MAIlB,UACI,uBACIO,MAAOR,EACPE,UAAU,cACVO,YAAY,wBACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBV,EAAkBU,EAAOH,UAEvD,wBAAQN,UAAU,eAAlB,+BCCGU,G,MA1BD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,eAAhC,OACV,oBAAId,UAAU,QAAd,SACKW,EAAMI,KAAI,SAAAC,GAAI,OACX,qBAEIhB,UAAS,qBAAgBgB,EAAKC,MAAQL,EAAW,uBAAyB,IAF9E,UAGI,wBACIZ,UAAU,oCACVkB,QAAS,kBAAMJ,EAAeE,EAAKG,KAFvC,SAIKH,EAAKC,KAAO,SAAM,KAEvB,sBAAMjB,UAAS,UAAKgB,EAAKC,KAAO,6BAA+B,GAAhD,wBAAf,SACKD,EAAKI,UAEV,wBACIpB,UAAU,sCACVkB,QAAS,kBAAML,EAAWG,EAAKG,KAFnC,4BAXKH,EAAKG,WCaXE,G,MAjBC,SAAC,GAAD,IAAGV,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUU,EAApB,EAAoBA,eAAgBC,EAApC,EAAoCA,WAApC,OACZZ,EAAMa,OAAS,GACX,sBAAKxB,UAAU,yBAAf,UACI,yBAAQkB,QAASI,EAAgBtB,UAAU,kBAA3C,UACKY,EAAW,aAAU,QAD1B,qBAGA,wBACIM,QAASK,EACTvB,UAAU,kBACVyB,SAAUd,EAAMe,OAAM,qBAAGT,QAH7B,wCCIGU,G,MAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,mBAAhB,OACZ,0BAAS9B,UAAU,UAAnB,UACI,sBAAKA,UAAU,yBAAf,UACI,oBAAIA,UAAU,sBAAd,SAAqC4B,IACpCE,KAEJD,OCFME,EANA,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAH,OACX,wBAAQ5B,UAAU,SAAlB,SACI,oBAAIA,UAAU,yBAAd,SAAwC4B,OC4EjCI,MAvEf,WACE,MAAgCnC,oBAAS,GAAzC,mBAAOe,EAAP,KAAiBqB,EAAjB,KACA,EAA0BpC,mBAAS,IAAnC,mBAAOc,EAAP,KAAcuB,EAAd,KAqCA,OACE,qCACE,cAAC,EAAD,CAAQN,MAAM,qBACd,uBAAM5B,UAAU,OAAhB,UACE,cAAC,EAAD,CACE4B,MAAM,qBACNC,KAAM,cAAC,EAAD,CAAMjC,WAjBD,SAACE,GAClBoC,GAAS,SAAAvB,GAAK,4BACTA,GADS,CAEZ,CACES,QAAStB,EACTmB,MAAM,EACNE,GAAIR,EAAMa,OAASb,EAAMA,EAAMa,OAAS,GAAGL,GAAK,EAAI,aAapD,cAAC,EAAD,CACES,MAAM,mBACNC,KACE,cAAC,EAAD,CACElB,MAAOA,EACPC,SAAUA,EACVC,WA7CO,SAACM,GAClBe,GAAS,SAAAvB,GAAK,OAAIA,EAAMwB,QAAO,SAAAnB,GAAI,OAAIA,EAAKG,KAAOA,SA6CzCL,eA1CW,SAACK,GACtBe,GAAS,SAAAvB,GAAK,OAAIA,EAAMI,KAAI,SAAAC,GAC1B,OAAIA,EAAKG,KAAOA,EACP,2BAAKH,GAAZ,IAAkBC,MAAOD,EAAKC,OAEzBD,WAwCHc,mBACE,cAAC,EAAD,CACEnB,MAAOA,EACPC,SAAUA,EACVU,eAzDW,WACrBW,GAAY,SAAArB,GAAQ,OAAKA,MAyDfW,WAzCO,WACjBW,GAAS,SAAAvB,GAAK,OAAIA,EAAMI,KAAI,SAAAC,GAAI,kCAC3BA,GAD2B,IAE9BC,MAAM,sBCnBGmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5956d09d.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"Tasks\">\r\n        {tasks.map(task => (\r\n            <li\r\n                key={task.id}\r\n                className={`Tasks__item${task.done && hideDone ? \" Tasks__item--hidden\" : \"\"}`}>\r\n                <button\r\n                    className=\"Tasks__button Tasks__button--done\"\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </button>\r\n                <span className={`${task.done ? \" tasksList__spanTask--done\" : \"\"} tasksList__spanTask`}>\r\n                    {task.content}\r\n                </span>\r\n                <button\r\n                    className=\"Tasks__button Tasks__button--remove\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ðŸ—‘\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    tasks.length > 0 && (\r\n        <div className=\"section__buttonWrapper\">\r\n            <button onClick={toggleHideDone} className=\"section__button\">\r\n                {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n            </button>\r\n            <button\r\n                onClick={setAllDone}\r\n                className=\"section__button\"\r\n                disabled={tasks.every(({ done }) => done)}\r\n            >\r\n                UkoÅ„cz wszystkie\r\n            </button>\r\n        </div>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__headerWrapper\">\r\n            <h2 className=\"section__headerName\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;\r\n","const Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__aplicationName\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import { useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\n\nfunction App() {\n  const [hideDone, sethideDone] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const toggleHideDone = () => {\n    sethideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      }\n    ])\n  };\n\n  return (\n    <>\n      <Header title=\"Lista zadaÅ„\" />\n      <main className=\"main\">\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={<Form addNewTask={addNewTask} />}\n        />\n        <Section\n          title=\"Lista zadaÅ„\"\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n            />\n          }\n        />\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}